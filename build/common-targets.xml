<?xml version="1.0" encoding="UTF-8"?>
<project name="common" basedir=".">

	<import file="product.names.xml" />
	<import file="build-checks.xml" />

	<target name="clean.bin">
		<delete dir="${bin.dir}" />
	</target>
	
	<target name="clean.web">
		<delete dir="${web.dir}" />
	</target>
	
	<target name="clean.mvn">
		<delete dir="${mvn.dir}" />
		<delete dir="${war.dir}" />
	</target>
	
	<target name="clean.version">
		<delete>
			<fileset dir="${src.dir}" includes="version.properties,${template.files}"/>
			<fileset dir="${cfg.dir}/../" includes="pom.xml"/>
			<fileset dir="." includes="filter.properties"/>
		</delete>
	</target>
	
	<target name="record.artifact.build" depends="compute.artifact.version">
		<tstamp>
			<format property="artifact.build.time" pattern="yyyy-MM-dd.hh-mm-ss" />
		</tstamp>
		
		<property name="product.build.message" 
			value="${product.name} ${artifact.version} built at ${artifact.build.time}" />
		
		<echo append="false" message="${product.build.message}" 
			file="${build.version.folder}/${artifact.build.time}.txt" />
		
		<echo message="${product.build.message}" />
	</target>

	<target name="compute.artifact.version" depends="check.target.resources,git.prep">
		<tstamp>
			<format property="version.build.time" pattern="yyyyMMdd-HHmmss" />
		</tstamp>
		<property name="artifact.version" value="${release.version}.${version.build.time}" />
	</target>
	
	<target name="configure.files" depends="copy.filtered.files" />
	
	<target name="configure.resource.filters" depends=
		"define.resource.dir.if.missing, define.copy.dir.if.missing, define.resource.filters.if.missing">
		<delete file="filter.properties" />
		<copy file="${version.dir}/version.properties" tofile="filter.properties" />

		<concat destfile="filter.properties" append="true" fixlastline="yes">
			<filelist dir="${filters.dir}" files="${resource.filters}" />
		</concat>
	</target>
	
	<target name="copy.filtered.files" depends="configure.resource.filters">
		<echo message="generating ${build.target} ${resource.files}${line.separator} filtered by ${resource.filters}" />
		<copy todir="${copy.dir}" overwrite="true">
			<fileset dir="${resource.dir}" includes="${resource.files}" />
			<filterset>
				<filtersfile file="filter.properties" />
			</filterset>
		</copy>
	</target>
	
	<target name="configure.host.files" unless="server.number">
		<antcall target="copy.filtered.files" />
	</target>
	
	<target name="configure.server.files" if="server.number"
		depends="define.resource.dir.if.missing, define.copy.dir.if.missing, define.resource.filters.if.missing">
		<echo message="generating ${build.target} ${resource.files}${line.separator} filtered by ${resource.filters}" />
		<concat destfile="filter.properties" fixlastline="yes">
			<filelist dir="${filters.dir}" files="${resource.filters}" />
		</concat>

		<copy todir="${copy.dir}" overwrite="true">
			<fileset dir="${resource.dir}" includes="${resource.files}" />
			<filterset>
				<filtersfile file="filter.properties" />
				<filtersfile file="${filters.dir}/server.${server.number}.properties" />
			</filterset>
		</copy>
	</target>
	
	<target name="configure.test.files" if="test.target.valid">
		<echo message="generating ${build.target} ${resource.files}${line.separator} filtered by ${resource.filters}" />
		<copy todir="${copy.dir}" overwrite="true">
        	<globmapper from="test.*.xml" to="*.xml" />
			<fileset dir="${resource.dir}" includes="${resource.files}" />
			<filterset>
				<filtersfile file="filter.properties" />
			</filterset>
		</copy>
	</target>
	
	<target name="configure.maven.project">
		<antcall target="copy.filtered.files">
			<param name="copy.dir" value="${maven.project.folder}"/>
			<param name="resource.dir" value="${maven.project.folder}/src/main/templates"/>
			<param name="resource.files" value="pom.xml"/>
		</antcall>
	</target>
	
	<target name="configure.version" depends="compute.artifact.version">
		<echo file="${version.dir}/version.properties" append="false" 
			message="${line.separator}build.target=${build.target}${line.separator}" />
		
		<echo file="${version.dir}/version.properties" append="true" 
			message="product.version.number=${artifact.version}${line.separator}" />
		
		<echo file="${version.dir}/version.properties" append="true" 
			message="product.name=${product.name}${line.separator}" />
	</target>
	
	<target name="copy.resources" depends="configure.resource.filters">
		<echo message="copying ${build.target} ${resource.files}" />
		<copy todir="${copy.dir}" overwrite="true">
			<fileset dir="${filters.dir}" includes="${resource.files}" />
		</copy>
	</target>
	
	<target name="copy.test.resources">
		<echo message="tests copying build ${test.resource.files}" />
		<copy todir="${test.dir}" overwrite="true">
			<fileset dir="${targets.dir}/build" includes="${test.resource.files}" />
		</copy>
	</target>
    
    <target name="copy.product">
    	<mkdir dir="${war.dir}" />
    	<echo message="copying ${product.name}.${product.type}" />
        <copy todir="${war.dir}"  overwrite="true">
        	<last count="1">
        		<sort>
        			<name />
                    <fileset dir="${mvn.dir}">
                        <include name="${product.name}*.${product.type}" />
                    </fileset>
        		</sort>
        	</last>
        	<globmapper from="${product.name}*.${product.type}" 
                          to="${product.name}.${product.type}" />
        </copy>
    </target>
	
	<target name="run.maven" depends=
		"select.maven,run.maven.standard,run.maven.configured" />
    
    <target name="run.maven.standard" unless="settings.path">
    	<exec dir="${product.folder}" executable="${maven.command}" searchpath="true">
            <arg value="${module.command}" />
    	    <arg value="-Dbuild.target=${build.target}" />
            <arg value="-U" />
    	</exec>
    </target>
    
    <target name="run.maven.configured" if="settings.path">
    	<exec dir="${product.folder}" executable="${maven.command}" searchpath="true">
            <arg value="${module.command}" />
    	    <arg value="-Dbuild.target=${build.target}" />
            <arg value="-U" />
            <arg value="-s" />
            <arg value="${settings.path}" />
    	</exec>
    </target>
	
	<target name="build.maven.module" depends=
		"select.maven,build.maven.module.standard,build.maven.module.configured" />
    
    <target name="build.maven.module.standard" unless="settings.path">
    	<exec dir="." executable="${maven.command}" searchpath="true">
            <arg value="${module.command}" />
            <arg value="-pl" />
            <arg value="${module.path}" />
    	    <arg value="-Dbuild.target=${build.target}" />
            <arg value="-U" />
    	</exec>
    </target>
    
    <target name="build.maven.module.configured" if="settings.path">
    	<exec dir="." executable="${maven.command}" searchpath="true">
            <arg value="${module.command}" />
            <arg value="-pl" />
            <arg value="${module.path}" />
    	    <arg value="-Dbuild.target=${build.target}" />
            <arg value="-U" />
            <arg value="-s" />
            <arg value="${settings.path}" />
    	</exec>
    </target>

    <target name="build.named.product" depends="git.check,run.maven" />
    <target name="build.configured.product" depends="git.prep,build.named.product" />

    <target name="deploy.maven.artifact" depends="select.maven">
    	<exec dir="${source.dir}" executable="${maven.command}" searchpath="true">
            <arg value="deploy:deploy-file" />
            <arg value="-DgroupId=${group.name}" />
            <arg value="-DartifactId=${artifact.name}" />
            <arg value="-Dversion=${artifact.version}" />
    	    <arg value="-Dpackaging=${artifact.type}" />
            <arg value="-Dfile=${artifact.file}" />
            <arg value="-DrepositoryId=${repo.name}" />
            <arg value="-Durl=${repo.url}" />
    	</exec>
    </target>

</project>
